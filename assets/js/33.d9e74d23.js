(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{309:function(a,s,t){"use strict";t.r(s);var v=t(14),_=Object(v.a)({},(function(){var a=this,s=a._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h2",{attrs:{id:"限定符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#限定符"}},[a._v("#")]),a._v(" 限定符")]),a._v(" "),s("p",[a._v("1、"),s("strong",[a._v("?")]),a._v(":它前面的字符需要出现0次或1次")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[a._v("例如：used?可以匹配到use和used\n")])])]),s("p",[a._v("2、"),s("strong",[s("code",[a._v("*")])]),a._v(":它会匹配0个或多个字符")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[a._v("例如：ab*c可以匹配到ac,abc,abbbbbbc\n")])])]),s("p",[a._v("3、"),s("strong",[a._v("+")]),a._v(":它会匹配一次及以上的字符")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[a._v("例如：ab+c可以匹配abc,abbbc,而不会匹配ac\n")])])]),s("p",[a._v("4、"),s("strong",[a._v("{}")]),a._v(":可以限定匹配的数量")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[a._v("例如：ab{6}c,则匹配到abbbbbbc,而要限定b的数量在2到6之间，则是ab{2,6}c，如果只是两次以上，则省略括号里的6，写成ab{2,}c\n")])])]),s("h2",{attrs:{id:"或-运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#或-运算符"}},[a._v("#")]),a._v(' "或"运算符')]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[a._v("例如：a (cat|dog)匹配的是a cat和a dog\n")])])]),s("h2",{attrs:{id:"字符类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符类"}},[a._v("#")]),a._v(" 字符类")]),a._v(" "),s("p",[a._v("[]:表示里面的内容只能取自于它们")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[a._v("例如：[a-z]表示所有小写的英文字母，[abc]能匹配到abc,aabbcc,abcc,[a-zA-Z]表示所有的英文字母，如果在[]前加上^,表示[]之外的字符\n")])])]),s("h2",{attrs:{id:"元字符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#元字符"}},[a._v("#")]),a._v(" 元字符")]),a._v(" "),s("p",[s("strong",[a._v("\\d")]),a._v(":数字字符，等同于[0-9]")]),a._v(" "),s("p",[s("strong",[a._v("\\w")]),a._v(":单词字符")]),a._v(" "),s("p",[s("strong",[a._v("\\s")]),a._v(":空白符，包含Tab和换行符")]),a._v(" "),s("p",[s("strong",[a._v("\\D")]),a._v(":非数字字符")]),a._v(" "),s("p",[s("strong",[a._v("\\W")]),a._v(":非单词字符")]),a._v(" "),s("p",[s("strong",[a._v("\\S")]),a._v(":非空白符")]),a._v(" "),s("p",[s("strong",[a._v("^")]),a._v(":匹配行首")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[a._v("例如：^a匹配abv,acccn\n")])])]),s("p",[s("strong",[a._v("$")]),a._v(":匹配行尾")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[a._v("例如：a$匹配tea,cba\n")])])]),s("h2",{attrs:{id:"贪婪与懒惰匹配"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#贪婪与懒惰匹配"}},[a._v("#")]),a._v(" 贪婪与懒惰匹配")]),a._v(" "),s("p",[s("strong",[a._v("贪婪匹配")]),a._v("：正则表达式通常的行为是匹配尽可能多的字符，比如这个表达式：a.*b，它将会匹配最长的以a开始，以b结束的字符串，如果用它来搜索aabab的话，它会匹配整个字符串aabab")]),a._v(" "),s("p",[s("strong",[a._v("懒惰匹配")]),a._v("：就是匹配尽可能少的字符，在能使整个匹配成功的前提下使用最少的重复，只要在它后面加上一个问号?即可，例如a.*?b匹配最短的，以a开始，以b结束的字符串，如果把它应用于aabab的话，它会匹配aab和ab，为什么第一个匹配是aab（第一到第三个字符）而不是ab（第二到第三个字符）？简单地说，因为正则表达式有一条比懒惰／贪婪规则优先级更高的规则，就是：最先开始的匹配拥有最高的优先权")])])}),[],!1,null,null,null);s.default=_.exports}}]);