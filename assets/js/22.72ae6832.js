(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{295:function(a,e,r){"use strict";r.r(e);var t=r(14),n=Object(t.a)({},(function(){var a=this,e=a._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h3",{attrs:{id:"一-chunk-array-size-1"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一-chunk-array-size-1"}},[a._v("#")]),a._v(" 一._.chunk(array, [size=1]):")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("将数组（array）拆分成多个 size 长度的区块，并将这些区块组成一个新数组。 如果array 无法被分割成全部等长的区块，那么最后剩余的元素将组成一个区块。\n_.chunk(['a', 'b', 'c', 'd'], 2);\n  // => [['a', 'b'], ['c', 'd']]\n")])])]),e("h4",{attrs:{id:"官方源码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#官方源码"}},[a._v("#")]),a._v(" 官方源码")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("function chunk(array, size = 1) {\n  size = Math.max(toInteger(size), 0)\n  const length = array == null ? 0 : array.length\n  if (!length || size < 1) {\n    return []\n  }\n  let index = 0\n  let resIndex = 0\n  const result = new Array(Math.ceil(length / size))    \n\n  while (index < length) {\n    result[resIndex++] = slice(array, index, (index += size))\n  }\n  return result\n}    \n")])])]),e("h4",{attrs:{id:"自己的源码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#自己的源码"}},[a._v("#")]),a._v(" 自己的源码")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("function chunk(array,size){\n    let newarray = [];\n    let nestedarray = [];\n   array.forEach((element,index) => {\n        //let nestedarray = [];\n        nestedarray.push(element)\n        //console.log(nestedarray)\n        if((index+1)%size===0){\n          newarray.push(nestedarray)\n          nestedarray=[]\n        }\n        if((index+1)===array.length){\n           newarray.push(nestedarray)\n        }\n   });\n   return newarray;\n}\nlet array = [1,3,4,6,6,8,9,5]\nconsole.log(chunk(array,3))\n")])])]),e("h4",{attrs:{id:"应用场景"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#应用场景"}},[a._v("#")]),a._v(" 应用场景")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("函数在前端可以用来缓解一些性能问题。例如大量的 DOM 操作，可以分块让浏览器在空闲的时候处理，避免页面卡死。如下    面的代码，向页面中插入大量的DOM。\nconst arr = [] // 1万条数据\nconst chunks = _.chunk(arr, 100)    \n\nconst append = function () {\n  if (chunks.length > 0) {\n    const current = chunks.pop()\n    current.forEach(item => {\n      const node = document.createElement('div')\n      node.innerText = item\n      document.body.appendChild(node)\n    })\n    setTimeout(append, 0)\n  }\n}\n\nappend()\n")])])]),e("hr"),a._v(" "),e("h3",{attrs:{id:"二-compact-array"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二-compact-array"}},[a._v("#")]),a._v(" 二._.compact(array)")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("创建一个新数组，包含原数组中所有的非假值元素。例如false, null,0, \"\", undefined, 和 NaN 都是被认为是“假值”。\n_.compact([0, 1, false, 2, '', 3]);\n// => [1, 2, 3]\n")])])]),e("h4",{attrs:{id:"官方源码-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#官方源码-2"}},[a._v("#")]),a._v(" 官方源码")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("function compact(array) {\n  let resIndex = 0\n  const result = []    \n\n  if (array == null) {\n    return result\n  }    \n\n  for (const value of array) {\n    if (value) {\n      result[resIndex++] = value\n    }\n  }\n  return result\n")])])]),e("p",[a._v("}")]),a._v(" "),e("h4",{attrs:{id:"自己的代码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#自己的代码"}},[a._v("#")]),a._v(" 自己的代码")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("  //需求找到数组内偶数\n  let arr = [1, 2, 0,NaN,undefined,'',false,null]\n  let newArr = arr.filter((item, i, arr) => {\n  //函数本身返回布尔值，只有当返回值为true时，当前项存入新数组。\n\treturn item!==0&&!isNaN(item)&&item!==undefined&&item!==false&&item!==null&&item!==''\n  })\nconsole.log(newArr)\n")])])]),e("h4",{attrs:{id:"应用场景-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#应用场景-2"}},[a._v("#")]),a._v(" 应用场景")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("过滤数组中的假值\n")])])]),e("hr"),a._v(" "),e("h3",{attrs:{id:"三-concat-array-values"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三-concat-array-values"}},[a._v("#")]),a._v(" 三._.concat(array, [values])")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("*创建一个新数组，将array与任何数组 或 值连接在一起。\n*var array = [1];\n*var other = _.concat(array, 2, [3], [[4]]);\n\n*console.log(other);\n*// => [1, 2, 3, [4]]\n\n*console.log(array);\n*// => [1]\n")])])]),e("hr"),a._v(" "),e("h3",{attrs:{id:"四-difference-array-values"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#四-difference-array-values"}},[a._v("#")]),a._v(" 四._.difference(array, [values])")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("*创建一个具有唯一array值的数组，每个值不包含在其他给定的数组中。\n*_.difference([3, 2, 1], [4, 2]);\n*// => [3, 1]\n")])])]),e("hr"),a._v(" "),e("h3",{attrs:{id:"五-differenceby-array-values-iteratee-identity"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#五-differenceby-array-values-iteratee-identity"}},[a._v("#")]),a._v(" 五."),e("em",[a._v(".differenceBy(array, [values], [iteratee=")]),a._v(".identity])")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("*它接受一个 iteratee （注：迭代器）， 调用array 和 values 中的每个元素以产生比较的标准。 结果值是从第一数组中选择。\n*_.differenceBy([3.1, 2.2, 1.3], [4.4, 2.5], Math.floor);\n*// => [3.1, 1.3]\n\n*// The `_.property` iteratee shorthand.\n*_.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');\n*// => [{ 'x': 2 }]\n")])])]),e("hr"),a._v(" "),e("h3",{attrs:{id:"六-differencewith-array-values-comparator"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#六-differencewith-array-values-comparator"}},[a._v("#")]),a._v(" 六._.differenceWith(array, [values], [comparator])")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("*它接受一个 comparator （注：比较器），它调用比较array，values中的元素。 结果值是从第一数组中选择。\n*var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n\n*_.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);\n*// => [{ 'x': 2, 'y': 1 }]\n")])])]),e("hr"),a._v(" "),e("h3",{attrs:{id:"七-drop-array-n-1"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#七-drop-array-n-1"}},[a._v("#")]),a._v(" 七._.drop(array, [n=1])")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("*创建一个切片数组，去除array前面的n个元素。\n*_.drop([1, 2, 3]);\n*// => [2, 3]\n")])])]),e("hr"),a._v(" "),e("h3",{attrs:{id:"八-dropright-array-n-1"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#八-dropright-array-n-1"}},[a._v("#")]),a._v(" 八._.dropRight(array, [n=1])")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("*创建一个切片数组，去除array尾部的n个元素。\n*_.dropRight([1, 2, 3]);\n*// => [1, 2]\n")])])]),e("hr"),a._v(" "),e("h3",{attrs:{id:"九-droprightwhile-array-predicate-identity"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#九-droprightwhile-array-predicate-identity"}},[a._v("#")]),a._v(" 九."),e("em",[a._v(".dropRightWhile(array, [predicate=")]),a._v(".identity])")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("*创建一个切片数组，去除array中从 predicate 返回假值开始到尾部的部分。\n*var users = [\n*{ 'user': 'barney',  'active': true },\n*{ 'user': 'fred',    'active': false },\n*{ 'user': 'pebbles', 'active': false }\n*];\n\n*_.dropRightWhile(users, function(o) { return !o.active; });\n*// => objects for ['barney']\n\n*// The `_.matches` iteratee shorthand.\n*_.dropRightWhile(users, { 'user': 'pebbles', 'active': false });\n*// => objects for ['barney', 'fred']\n\n*// The `_.matchesProperty` iteratee shorthand.\n*_.dropRightWhile(users, ['active', false]);\n*// => objects for ['barney']\n\n*// The `_.property` iteratee shorthand.\n*_.dropRightWhile(users, 'active');\n*// => objects for ['barney', 'fred', 'pebbles']\n")])])]),e("hr"),a._v(" "),e("h3",{attrs:{id:"十-dropwhile-array-predicate-identity"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#十-dropwhile-array-predicate-identity"}},[a._v("#")]),a._v(" 十."),e("em",[a._v(".dropWhile(array, [predicate=")]),a._v(".identity])")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("*创建一个切片数组，去除array中从起点开始到 predicate 返回假值结束部分\n *var users = [\n*{ 'user': 'barney',  'active': true },\n*{ 'user': 'fred',    'active': false },\n*{ 'user': 'pebbles', 'active': false }\n*];\n\n*_.dropWhile(users, function(o) { return !o.active; });\n*// => objects for ['pebbles']\n\n*// The `_.matches` iteratee shorthand.\n*_.dropWhile(users, { 'user': 'pebbles', 'active': false });\n*// => objects for ['fred', 'pebbles']\n\n*// The `_.matchesProperty` iteratee shorthand.\n*_.dropWhile(users, ['active', false]);\n*// => objects for ['pebbles']\n\n*// The `_.property` iteratee shorthand.\n*_.dropWhile(users, 'active');\n*// => objects for ['barney', 'fred', 'pebbles']\n")])])]),e("hr"),a._v(" "),e("h3",{attrs:{id:"十一-fill-array-value-start-0-end-array-length"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#十一-fill-array-value-start-0-end-array-length"}},[a._v("#")]),a._v(" 十一._.fill(array, value, [start=0], [end=array.length])")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("*使用 value 值来填充（替换） array，从start位置开始, 到end位置结束（但不包含end位置）\n*var array = [1, 2, 3];\n\n*_.fill(array, 'a');\n*console.log(array);\n*// => ['a', 'a', 'a']\n\n*_.fill(Array(3), 2);\n*// => [2, 2, 2]\n\n*_.fill([4, 6, 8, 10], '*', 1, 3);\n*// => [4, '*', '*', 10]\n")])])]),e("hr"),a._v(" "),e("h3",{attrs:{id:"十二-findindex-array-predicate-identity-fromindex-0"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#十二-findindex-array-predicate-identity-fromindex-0"}},[a._v("#")]),a._v(" 十二."),e("em",[a._v(".findIndex(array, [predicate=")]),a._v(".identity], [fromIndex=0])")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("*该方法类似_.find，区别是该方法返回第一个通过 predicate 判断为真值的元素的索引值（index），而不是元素本身。\n*var users = [\n*{ 'user': 'barney',  'active': false },\n*{ 'user': 'fred',    'active': false },\n*{ 'user': 'pebbles', 'active': true }\n*];\n\n*_.findIndex(users, function(o) { return o.user == 'barney'; });\n*// => 0\n\n*// The `_.matches` iteratee shorthand.\n*_.findIndex(users, { 'user': 'fred', 'active': false });\n*// => 1\n\n*// The `_.matchesProperty` iteratee shorthand.\n*_.findIndex(users, ['active', false]);\n*// => 0\n\n*// The `_.property` iteratee shorthand.\n*_.findIndex(users, 'active');\n*// => 2\n")])])]),e("hr"),a._v(" "),e("h3",{attrs:{id:"十三-findlastindex-array-predicate-identity-fromindex-array-length-1"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#十三-findlastindex-array-predicate-identity-fromindex-array-length-1"}},[a._v("#")]),a._v(" 十三."),e("em",[a._v(".findLastIndex(array, [predicate=")]),a._v(".identity], [fromIndex=array.length-1])")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("*这个方式类似_.findIndex， 区别是它是从右到左的迭代集合array中的元素。\n*_.findLastIndex(users, function(o) { return o.user == 'pebbles'; });\n*// => 2\n* \n*// The `_.matches` iteratee shorthand.\n*_.findLastIndex(users, { 'user': 'barney', 'active': true });\n*// => 0\n* \n*// The `_.matchesProperty` iteratee shorthand.\n*_.findLastIndex(users, ['active', false]);\n*// => 2\n* \n*// The `_.property` iteratee shorthand.\n*_.findLastIndex(users, 'active');\n*// => 0\n")])])]),e("hr"),a._v(" "),e("h3",{attrs:{id:"十四-head-array"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#十四-head-array"}},[a._v("#")]),a._v(" 十四._.head(array)")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("*获取数组 array 的第一个元素。\n*_.head([1, 2, 3]);\n*// => 1\n* \n*_.head([]);\n*// => undefined\n")])])]),e("hr"),a._v(" "),e("h3",{attrs:{id:"十五-flatten-array"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#十五-flatten-array"}},[a._v("#")]),a._v(" 十五._.flatten(array)")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("*减少一级array嵌套深度。\n*_.flatten([1, [2, [3, [4]], 5]]);\n*// => [1, 2, [3, [4]], 5]\n")])])]),e("hr"),a._v(" "),e("h3",{attrs:{id:"十六-flattendeep-array"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#十六-flattendeep-array"}},[a._v("#")]),a._v(" 十六._.flattenDeep(array)")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("*将array递归为一维数组。\n*_.flattenDeep([1, [2, [3, [4]], 5]]);\n*// => [1, 2, 3, 4, 5]\n")])])]),e("hr"),a._v(" "),e("h3",{attrs:{id:"十七-flattendepth-array-depth-1"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#十七-flattendepth-array-depth-1"}},[a._v("#")]),a._v(" 十七._.flattenDepth(array, [depth=1])")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("*根据 depth 递归减少 array 的嵌套层级\n*var array = [1, [2, [3, [4]], 5]];\n* \n*_.flattenDepth(array, 1);\n*// => [1, 2, [3, [4]], 5]\n* \n*_.flattenDepth(array, 2);\n*// => [1, 2, 3, [4], 5]\n")])])]),e("hr"),a._v(" "),e("h3",{attrs:{id:"十八-frompairs-pairs"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#十八-frompairs-pairs"}},[a._v("#")]),a._v(" 十八._.fromPairs(pairs)")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("*这个方法返回一个由键值对pairs构成的对象。\n*_.fromPairs([['fred', 30], ['barney', 40]]);\n*// => { 'fred': 30, 'barney': 40 }\n")])])]),e("hr"),a._v(" "),e("h3",{attrs:{id:"十九-head-array"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#十九-head-array"}},[a._v("#")]),a._v(" 十九._.head(array)")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("*获取数组 array 的第一个元素。\n*_.head([1, 2, 3]);\n*// => 1\n* \n*_.head([]);\n*// => undefined\n")])])]),e("hr"),a._v(" "),e("h3",{attrs:{id:"二十-indexof-array-value-fromindex-0"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二十-indexof-array-value-fromindex-0"}},[a._v("#")]),a._v(" 二十._.indexOf(array, value, [fromIndex=0])")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("*使用SameValueZero 等值比较，返回首次 value 在数组array中被找到的 索引值， 如果 fromIndex 为负值，将从数组array尾端索引进行匹配。\n*_.indexOf([1, 2, 1, 2], 2);\n*// => 1\n* \n*// Search from the `fromIndex`.\n*_.indexOf([1, 2, 1, 2], 2, 2);\n*// => 3    \n")])])]),e("hr"),a._v(" "),e("h3",{attrs:{id:"二十一-initial-array"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二十一-initial-array"}},[a._v("#")]),a._v(" 二十一._.initial(array)")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("*获取数组array中除了最后一个元素之外的所有元素（注：去除数组array中的最后一个元素）。\n*_.initial([1, 2, 3]);\n*// => [1, 2]\n")])])]),e("hr"),a._v(" "),e("h3",{attrs:{id:"二十二-intersection-arrays"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二十二-intersection-arrays"}},[a._v("#")]),a._v(" 二十二._.intersection([arrays])")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("*创建唯一值的数组，这个数组包含所有给定数组都包含的元素，使用SameValueZero进行相等性比较。\n*_.intersection([2, 1], [4, 2], [1, 2]);\n*// => [2]\n")])])]),e("hr"),a._v(" "),e("h3",{attrs:{id:"二十三-intersectionby-arrays-iteratee-identity"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二十三-intersectionby-arrays-iteratee-identity"}},[a._v("#")]),a._v(" 二十三."),e("em",[a._v(".intersectionBy([arrays], [iteratee=")]),a._v(".identity])")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("*接受一个 iteratee 调用每一个arrays的每个值以产生一个值，通过产生的值进行了比较。结果值是从第一数组中选择。\n*_.intersectionBy([2.1, 1.2], [4.3, 2.4], Math.floor);\n*// => [2.1]\n* \n*// The `_.property` iteratee shorthand.\n*_.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n*// => [{ 'x': 1 }]\n")])])]),e("hr"),a._v(" "),e("h3",{attrs:{id:"二十四-intersectionwith-arrays-comparator"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二十四-intersectionwith-arrays-comparator"}},[a._v("#")]),a._v(" 二十四._.intersectionWith([arrays], [comparator])")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("*接受一个 comparator 调用比较arrays中的元素。结果值是从第一数组中选择。\n*var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n*var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n* \n*_.intersectionWith(objects, others, _.isEqual);\n*// => [{ 'x': 1, 'y': 2 }]    *\n")])])]),e("hr"),a._v(" "),e("h3",{attrs:{id:"二十五-join-array-separator"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二十五-join-array-separator"}},[a._v("#")]),a._v(" 二十五._.join(array, [separator=','])")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("*将 array 中的所有元素转换为由 separator 分隔的字符串。\n*_.join(['a', 'b', 'c'], '~');\n*// => 'a~b~c'\n")])])]),e("hr"),a._v(" "),e("h3",{attrs:{id:"二十六-last-array"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二十六-last-array"}},[a._v("#")]),a._v(" 二十六._.last(array)")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("获取array中的最后一个元素。\n_.last([1, 2, 3]);\n// => 3    \n")])])]),e("hr"),a._v(" "),e("h3",{attrs:{id:"二十七-lastindexof-array-value-fromindex-array-length-1"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二十七-lastindexof-array-value-fromindex-array-length-1"}},[a._v("#")]),a._v(" 二十七._.lastIndexOf(array, value, [fromIndex=array.length-1])")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("这个方法类似_.indexOf ，区别是它是从右到左遍历array的元素。\n_.lastIndexOf([1, 2, 1, 2], 2);\n// => 3\n \n// Search from the `fromIndex`.\n_.lastIndexOf([1, 2, 1, 2], 2, 2);\n// => 1\n")])])]),e("hr"),a._v(" "),e("h3",{attrs:{id:"二十八-nth-array-n-0"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二十八-nth-array-n-0"}},[a._v("#")]),a._v(" 二十八._.nth(array, [n=0])")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("获取array数组的第n个元素。如果n为负数，则返回从数组结尾开始的第n个元素。\nvar array = ['a', 'b', 'c', 'd'];\n \n_.nth(array, 1);\n// => 'b'\n \n_.nth(array, -2);\n// => 'c';    \n")])])]),e("hr"),a._v(" "),e("h3",{attrs:{id:"二十九-pull-array-values"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二十九-pull-array-values"}},[a._v("#")]),a._v(" 二十九._.pull(array, [values])")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("移除数组array中所有和给定值相等的元素，使用SameValueZero 进行全等比较。\nvar array = [1, 2, 3, 1, 2, 3];\n \n_.pull(array, 2, 3);\nconsole.log(array);\n// => [1, 1]\n")])])]),e("hr"),a._v(" "),e("h3",{attrs:{id:"三十-pullall-array-values"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三十-pullall-array-values"}},[a._v("#")]),a._v(" 三十._.pullAll(array, values)")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("这个方法类似_.pull，区别是这个方法接收一个要移除值的数组。\nvar array = [1, 2, 3, 1, 2, 3];\n \n_.pullAll(array, [2, 3]);\nconsole.log(array);\n// => [1, 1]    \n")])])]),e("hr"),a._v(" "),e("h3",{attrs:{id:"三十一-pullallby-array-values-iteratee-identity"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三十一-pullallby-array-values-iteratee-identity"}},[a._v("#")]),a._v(" 三十一."),e("em",[a._v(".pullAllBy(array, values, [iteratee=")]),a._v(".identity])")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("这个方法类似于_.pullAll ，区别是这个方法接受一个 iteratee（迭代函数） 调用 array 和 values的每个值以产生一个    值，通过产生的值进行了比较。\nvar array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];\n \n_.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');\nconsole.log(array);\n// => [{ 'x': 2 }]    \n")])])]),e("hr"),a._v(" "),e("h3",{attrs:{id:"三十二-pullallwith-array-values-comparator"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三十二-pullallwith-array-values-comparator"}},[a._v("#")]),a._v(" 三十二._.pullAllWith(array, values, [comparator])")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("这个方法类似于_.pullAll，区别是这个方法接受 comparator 调用array中的元素和values比较。\nvar array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];\n \n_.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);\nconsole.log(array);\n// => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]    \n")])])]),e("hr"),a._v(" "),e("h3",{attrs:{id:"三十三-pullat-array-indexes"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三十三-pullat-array-indexes"}},[a._v("#")]),a._v(" 三十三._.pullAt(array, [indexes])")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("根据索引 indexes，移除array中对应的元素，并返回被移除元素的数组。\nvar array = [5, 10, 15, 20];\nvar evens = _.pullAt(array, 1, 3);\n \nconsole.log(array);\n// => [5, 15]\n \nconsole.log(evens);\n// => [10, 20]\n")])])]),e("hr"),a._v(" "),e("h3",{attrs:{id:"三十四-remove-array-predicate-identity"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三十四-remove-array-predicate-identity"}},[a._v("#")]),a._v(" 三十四."),e("em",[a._v(".remove(array, [predicate=")]),a._v(".identity])")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("移除数组中predicate（断言）返回为真值的所有元素，并返回移除元素组成的数组\nvar array = [1, 2, 3, 4];\nvar evens = _.remove(array, function(n) {\n  return n % 2 == 0;\n});\n \nconsole.log(array);\n// => [1, 3]\n \nconsole.log(evens);\n// => [2, 4]    \n")])])]),e("hr"),a._v(" "),e("h3",{attrs:{id:"三十五-reverse-array"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三十五-reverse-array"}},[a._v("#")]),a._v(" 三十五._.reverse(array)")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("反转array，使得第一个元素变为最后一个元素，第二个元素变为倒数第二个元素，依次类推。\nvar array = [1, 2, 3];\n \n_.reverse(array);\n// => [3, 2, 1]\n \nconsole.log(array);\n// => [3, 2, 1]\n")])])]),e("hr"),a._v(" "),e("h3",{attrs:{id:"三十六-slice-array-start-0-end-array-length"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三十六-slice-array-start-0-end-array-length"}},[a._v("#")]),a._v(" 三十六._.slice(array, [start=0], [end=array.length])")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("裁剪数组array，从 start 位置开始到end结束，但不包括 end\n")])])]),e("hr"),a._v(" "),e("h3",{attrs:{id:"三十七-sortedindex-array-value"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三十七-sortedindex-array-value"}},[a._v("#")]),a._v(" 三十七._.sortedIndex(array, value)")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("使用二进制的方式检索来决定 value值 应该插入到数组中 尽可能小的索引位置，以保证array的排序\n_.sortedIndex([30, 50], 40);\n// => 1\n")])])]),e("hr"),a._v(" "),e("h3",{attrs:{id:"三十八-sortedindexby-array-value-iteratee-identity"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三十八-sortedindexby-array-value-iteratee-identity"}},[a._v("#")]),a._v(" 三十八."),e("em",[a._v(".sortedIndexBy(array, value, [iteratee=")]),a._v(".identity])")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("这个方法类似_.sortedIndex ，除了它接受一个 iteratee （迭代函数），调用每一个数组（array）元素，返回结果和    value 值比较来计算排序。iteratee 会传入一个参数：(value)。\nvar objects = [{ 'x': 4 }, { 'x': 5 }];\n \n_.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });\n// => 0\n \n// The `_.property` iteratee shorthand.\n_.sortedIndexBy(objects, { 'x': 4 }, 'x');\n// => 0    \n")])])]),e("hr"),a._v(" "),e("h3",{attrs:{id:"三十九-sortedindexof-array-value"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三十九-sortedindexof-array-value"}},[a._v("#")]),a._v(" 三十九._.sortedIndexOf(array, value)")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("这个方法类似_.indexOf，除了它是在已经排序的数组array上执行二进制检索。\n_.sortedIndexOf([4, 5, 5, 5, 6], 5);\n// => 1    \n")])])]),e("hr"),a._v(" "),e("h3",{attrs:{id:"四十-sortedlastindex-array-value"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#四十-sortedlastindex-array-value"}},[a._v("#")]),a._v(" 四十._.sortedLastIndex(array, value)")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("此方法类似于_.sortedIndex，除了 它返回 value值 在 array 中尽可能大的索引位置（index）。\n_.sortedLastIndex([4, 5, 5, 5, 6], 5);\n// => 4    \n")])])]),e("hr"),a._v(" "),e("h3",{attrs:{id:"四十一-sortedlastindexby-array-value-iteratee-identity"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#四十一-sortedlastindexby-array-value-iteratee-identity"}},[a._v("#")]),a._v(" 四十一."),e("em",[a._v(".sortedLastIndexBy(array, value, [iteratee=")]),a._v(".identity])")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("这个方法类似_.sortedLastIndex ，除了它接受一个 iteratee （迭代函数），调用每一个数组（array）元素，返回结果和    value 值比较来计算排序。iteratee 会传入一个参数：(value)。\nvar objects = [{ 'x': 4 }, { 'x': 5 }];\n \n_.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });\n// => 1\n \n// The `_.property` iteratee shorthand.\n_.sortedLastIndexBy(objects, { 'x': 4 }, 'x');\n// => 1    \n")])])]),e("hr"),a._v(" "),e("h3",{attrs:{id:"四十二-sortedlastindexof-array-value"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#四十二-sortedlastindexof-array-value"}},[a._v("#")]),a._v(" 四十二._.sortedLastIndexOf(array, value)")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("这个方法类似_.lastIndexOf，除了它是在已经排序的数组array上执行二进制检索。\n_.sortedLastIndexOf([4, 5, 5, 5, 6], 5);\n// => 3\n")])])]),e("hr"),a._v(" "),e("h3",{attrs:{id:"四十三-sorteduniq-array"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#四十三-sorteduniq-array"}},[a._v("#")]),a._v(" 四十三._.sortedUniq(array)")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("这个方法类似_.uniq，除了它会优化排序数组。\n_.sortedUniq([1, 1, 2]);\n// => [1, 2]\n")])])]),e("hr"),a._v(" "),e("h3",{attrs:{id:"四十四-sorteduniqby-array-iteratee"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#四十四-sorteduniqby-array-iteratee"}},[a._v("#")]),a._v(" 四十四._.sortedUniqBy(array, [iteratee])")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("这个方法类似_.uniqBy，除了它会优化排序数组。\n_.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);\n// => [1.1, 2.3]    \n")])])]),e("hr"),a._v(" "),e("h3",{attrs:{id:"四十五-tail-array"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#四十五-tail-array"}},[a._v("#")]),a._v(" 四十五_.tail(array)")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("获取除了array数组第一个元素以外的全部元素。\n_.tail([1, 2, 3]);\n// => [2, 3]    \n")])])]),e("hr"),a._v(" "),e("h3",{attrs:{id:"四十六-take-array-n-1"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#四十六-take-array-n-1"}},[a._v("#")]),a._v(" 四十六._.take(array, [n=1])")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("创建一个数组切片，从array数组的起始元素开始提取n个元素。\n_.take([1, 2, 3]);\n// => [1]\n \n_.take([1, 2, 3], 2);\n// => [1, 2]\n \n_.take([1, 2, 3], 5);\n// => [1, 2, 3]\n \n_.take([1, 2, 3], 0);\n// => []    \n")])])]),e("hr"),a._v(" "),e("h3",{attrs:{id:"四十七-takeright-array-n-1"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#四十七-takeright-array-n-1"}},[a._v("#")]),a._v(" 四十七._.takeRight(array, [n=1])")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("创建一个数组切片，从array数组的最后一个元素开始提取n个元素。\n_.takeRight([1, 2, 3]);\n// => [3]\n \n_.takeRight([1, 2, 3], 2);\n// => [2, 3]\n \n_.takeRight([1, 2, 3], 5);\n// => [1, 2, 3]\n \n_.takeRight([1, 2, 3], 0);\n// => []    \n")])])]),e("hr"),a._v(" "),e("h3",{attrs:{id:"四十七-takerightwhile-array-predicate-identity"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#四十七-takerightwhile-array-predicate-identity"}},[a._v("#")]),a._v(" 四十七."),e("em",[a._v(".takeRightWhile(array, [predicate=")]),a._v(".identity])")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("从array数组的最后一个元素开始提取元素，直到 predicate 返回假值。predicate 会传入三个参数： (value, index,     array)。\nvar users = [\n  { 'user': 'barney',  'active': true },\n  { 'user': 'fred',    'active': false },\n  { 'user': 'pebbles', 'active': false }\n];\n \n_.takeRightWhile(users, function(o) { return !o.active; });\n// => objects for ['fred', 'pebbles']\n \n// The `_.matches` iteratee shorthand.\n_.takeRightWhile(users, { 'user': 'pebbles', 'active': false });\n// => objects for ['pebbles']\n \n// The `_.matchesProperty` iteratee shorthand.\n_.takeRightWhile(users, ['active', false]);\n// => objects for ['fred', 'pebbles']\n \n// The `_.property` iteratee shorthand.\n_.takeRightWhile(users, 'active');\n// => []    \n")])])]),e("hr"),a._v(" "),e("h3",{attrs:{id:"四十八-takewhile-array-predicate-identity"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#四十八-takewhile-array-predicate-identity"}},[a._v("#")]),a._v(" 四十八."),e("em",[a._v(".takeWhile(array, [predicate=")]),a._v(".identity])")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("从array数组的起始元素开始提取元素，，直到 predicate 返回假值。predicate 会传入三个参数： (value, index,     array)。\nvar users = [\n  { 'user': 'barney',  'active': false },\n  { 'user': 'fred',    'active': false},\n  { 'user': 'pebbles', 'active': true }\n];\n \n_.takeWhile(users, function(o) { return !o.active; });\n// => objects for ['barney', 'fred']\n \n// The `_.matches` iteratee shorthand.\n_.takeWhile(users, { 'user': 'barney', 'active': false });\n// => objects for ['barney']\n \n// The `_.matchesProperty` iteratee shorthand.\n_.takeWhile(users, ['active', false]);\n// => objects for ['barney', 'fred']\n \n// The `_.property` iteratee shorthand.\n_.takeWhile(users, 'active');\n// => []\n")])])]),e("hr")])}),[],!1,null,null,null);e.default=n.exports}}]);